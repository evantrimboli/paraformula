import type { CharUtil as CU } from 'parsecco';
import { Primitives as P } from 'parsecco';
import { AST } from './ast';

export namespace ReservedWords {
  interface FunctionDefinition {
    readonly name: string;
    readonly minArity: number;
    readonly maxArity: number | null;
  }

  const createFnDef = (name: string, minArity: number, maxArity: number | null): FunctionDefinition => ({
    name,
    minArity,
    maxArity
  });

  const createFixed = (name: string, arity: number): FunctionDefinition => createFnDef(name, arity, arity);

  const defaultFunctionDefinitions: readonly FunctionDefinition[] = [
    createFixed('ABS', 1),
    createFnDef('ACCRINT', 6, 9),
    createFnDef('ACCRINTM', 4, 5),
    createFixed('ACOS', 1),
    createFixed('ACOSH', 1),
    createFixed('ACOT', 1),
    createFixed('ACOTH', 1),
    createFnDef('ADDRESS', 2, 5),
    createFnDef('AGGREGATE', 3, null),
    createFnDef('AMORDEGRC', 6, 7),
    createFnDef('AMORLINC', 6, 7),
    createFnDef('AND', 1, null),
    createFixed('ARABIC', 1),
    createFixed('AREAS', 1),
    createFixed('ASC', 1),
    createFixed('ASIN', 1),
    createFixed('ASINH', 1),
    createFixed('ATAN', 1),
    createFixed('ATAN2', 2),
    createFixed('ATANH', 1),
    createFnDef('AVEDEV', 1, null),
    createFnDef('AVERAGE', 1, null),
    createFnDef('AVERAGA', 1, null),
    createFnDef('AVERAGEIF', 2, 3),
    createFnDef('AVERAGEIFS', 3, null),
    createFixed('BAHTTEXT', 1),
    createFnDef('BASE', 2, 3),
    createFixed('BESSELI', 2),
    createFixed('BESSELJ', 2),
    createFixed('BESSELK', 2),
    createFixed('BESSELY', 2),
    createFnDef('BETA.DIST', 4, 6),
    createFnDef('BETA.INV', 3, 5),
    createFnDef('BETADIST', 3, 5),
    createFnDef('BETAINV', 3, 5),
    createFixed('BIN2DEC', 1),
    createFnDef('BIN2HEX', 1, 2),
    createFnDef('BIN2OCT', 1, 2),
    createFixed('BINOM.DIST', 4),
    createFnDef('BINOM.DIST.RANGE', 3, 4),
    createFixed('BINOM.INV', 3),
    createFixed('BINOMDIST', 4),
    createFixed('BITAND', 2),
    createFixed('BITLSHIFT', 2),
    createFixed('BITOR', 2),
    createFixed('BITRSHIFT', 2),
    createFixed('BITXOR', 2),
    createFnDef('CALL', 1, null),
    createFixed('CEILING', 2),
    createFixed('CEILING.MATH', 3),
    createFnDef('CEILING.PRECISE', 1, 2),
    createFnDef('CELL', 1, 2),
    createFixed('CHAR', 1),
    createFixed('CHIDIST', 2),
    createFixed('CHIINV', 2),
    createFixed('CHISQ.DIST', 3),
    createFixed('CHISQ.DIST.RT', 2),
    createFixed('CHISQ.TEST', 2),
    createFixed('CHITEST', 2),
    createFnDef('CHOOSE', 2, null),
    createFixed('CLEAN', 1),
    createFixed('CODE', 1),
    createFnDef('COLUMN', 0, 1),
    createFixed('COLUMNS', 1),
    createFixed('COMBIN', 2),
    createFixed('COMBINA', 2),
    createFnDef('COMPLEX', 2, 3),
    createFnDef('CONCAT', 1, null),
    createFnDef('CONCATENATE', 1, null),
    createFixed('CONFIDENCE', 3),
    createFixed('CONFIDENCE.NORM', 3),
    createFixed('CONFIDENCE.T', 3),
    createFixed('CONVERT', 3),
    createFixed('CORREL', 3),
    createFixed('COS', 1),
    createFixed('COSH', 1),
    createFixed('COT', 1),
    createFixed('COTH', 1),
    createFnDef('COUNT', 1, null),
    createFnDef('COUNTA', 1, null),
    createFixed('COUNTBLANK', 1),
    createFixed('COUNTIF', 2),
    createFnDef('COUNTIFS', 2, null),
    createFnDef('COUPDAYBS', 3, 4),
    createFnDef('COUPDAYS', 3, 4),
    createFnDef('COUPDAYSNC', 3, 4),
    createFnDef('COUPNCD', 3, 4),
    createFnDef('COUPNUM', 3, 4),
    createFnDef('COUPPCD', 3, 4),
    createFixed('COVAR', 2),
    createFixed('COVARIANCE.P', 2),
    createFixed('COVARIANCE.S', 2),
    createFixed('CRITBINOM', 3),
    createFixed('CSC', 1),
    createFixed('CSCH', 1),
    createFixed('CUBEKPIMEMBER', 3),
    createFnDef('CUBEMEMBER', 2, 3),
    createFixed('CUBEMEMBERPROPERTY', 3),
    createFnDef('CUBERANKEDMEMBER', 2, 3),
    createFnDef('CUBESET', 2, 5),
    createFixed('CUBESETCOUNT', 1),
    createFnDef('CUBEVALUE', 1, null),
    createFixed('CUMIPMT', 6),
    createFixed('CUMPRINC', 6),
    createFixed('DATE', 3),
    createFixed('DATEDIF', 3),
    createFixed('DATEVALUE', 2),
    createFixed('DAVERAGE', 3),
    createFixed('DAY', 1),
    createFixed('DAYS', 2),
    createFnDef('DAYS360', 2, 3),
    createFnDef('DB', 4, 5),
    createFixed('DBCS', 1),
    createFixed('DCOUNT', 3),
    createFixed('DCOUNTA', 3),
    createFnDef('DDB', 4, 5),
    createFnDef('DEC2BIN', 1, 2),
    createFnDef('DEC2HEX', 1, 2),
    createFnDef('DEC2OCT', 1, 2),
    createFixed('DECIMAL', 2),
    createFixed('DEGREES', 1),
    createFnDef('DELTA', 1, 2),
    createFnDef('DEVSQ', 1, null),
    createFixed('DGET', 3),
    createFnDef('DISC', 4, 5),
    createFixed('DMAX', 3),
    createFixed('DMIN', 3),
    createFnDef('DOLLAR', 1, 2),
    createFixed('DOLLARDE', 2),
    createFixed('DOLLARFR', 2),
    createFixed('DPRODUCT', 3),
    createFixed('DSTDEV', 3),
    createFixed('DSTDEVP', 3),
    createFixed('DSUM', 3),
    createFnDef('DURATION', 5, 6),
    createFixed('DVAR', 3),
    createFixed('DVARP', 3),
    createFixed('EDATE', 2),
    createFixed('EFFECT', 2),
    createFixed('ENCODEURL', 1),
    createFixed('EOMONTH', 2),
    createFnDef('ERF', 1, 2),
    createFixed('ERF.PRECISE', 1),
    createFixed('ERFC', 1),
    createFixed('ERFC.PRECISE', 1),
    createFixed('ERROR.TYPE', 1),
    createFixed('EUROCONVERT', 5),
    createFixed('EVEN', 1),
    createFixed('EXACT', 2),
    createFixed('EXP', 1),
    createFixed('EXPON.DIST', 3),
    createFixed('EXPONDIST', 3),
    createFnDef('F.DIST', 2, 4),
    createFixed('F.DIST.RT', 3),
    createFixed('F.INV', 3),
    createFixed('F.INV.RT', 3),
    createFixed('F.TEST', 2),
    createFixed('FACT', 1),
    createFixed('FACTDOUBLE', 1),
    createFixed('FDIST', 3),
    createFixed('FILTERXML', 2),
    createFnDef('FIND', 2, 3),
    createFnDef('FINDB', 2, 3),
    createFixed('FINV', 3),
    createFixed('FISHER', 1),
    createFixed('FISHERINV', 1),
    createFnDef('FIXED', 1, 3),
    createFixed('FLOOR', 2),
    createFixed('FLOOR.MATH', 3),
    createFnDef('FLOOR.PRECISE', 1, 2),
    createFixed('FORECAST', 3),
    createFnDef('FORECAST.ETS', 3, 6),
    createFnDef('FORECAST.ETS.CONFINT', 3, 7),
    createFnDef('FORECAST.ETS.SEASONALITY', 2, 4),
    createFnDef('FORECAST.ETS.STAT', 3, 6),
    createFixed('FORECAST.LINEAR', 3),
    createFixed('FORMULATEXT', 1),
    createFixed('FREQUENCY', 2),
    createFixed('FTEST', 2),
    createFnDef('FV', 3, 5),
    createFixed('FVSCHEDULE', 2),
    createFixed('GAMMA', 1),
    createFixed('GAMMA.DIST', 4),
    createFixed('GAMMA.INV', 3),
    createFixed('GAMMADIST', 4),
    createFixed('GAMMAINV', 3),
    createFixed('GAMMALN', 1),
    createFixed('GAMMALN.PRECISE', 1),
    createFixed('GAUSS', 1),
    createFnDef('GCD', 1, null),
    createFnDef('GEOMEAN', 1, null),
    createFnDef('GESTEP', 1, 2),
    createFnDef('GETPIVOTDATA', 2, null),
    createFnDef('GROWTH', 1, 4),
    createFnDef('HARMEAN', 1, null),
    createFnDef('HEX2BIN', 1, 2),
    createFixed('HEX2DEC', 1),
    createFnDef('HEX2OCT', 1, 2),
    createFnDef('HLOOKUP', 3, 4),
    createFixed('HOUR', 1),
    createFnDef('HYPERLINK', 1, 2),
    createFixed('HYPGEOM.DIST', 5),
    createFixed('HYPGEOMDIST', 4),
    createFnDef('IF', 2, 3),
    createFixed('IFERROR', 2),
    createFixed('IFNA', 2),
    createFnDef('IFS', 2, null),
    createFixed('IMABS', 1),
    createFixed('IMAGINARY', 1),
    createFixed('IMARGUMENT', 1),
    createFixed('IMCONJUGATE', 1),
    createFixed('IMCOS', 1),
    createFixed('IMCOSH', 1),
    createFixed('IMCOT', 1),
    createFixed('IMCSC', 1),
    createFixed('IMCSCH', 1),
    createFixed('IMDIV', 2),
    createFixed('IMEXP', 1),
    createFixed('IMLN', 1),
    createFixed('IMLOG10', 1),
    createFixed('IMLOG2', 1),
    createFixed('IMPOWER', 2),
    createFnDef('IMPRODUCT', 1, null),
    createFixed('IMREAL', 1),
    createFixed('IMSEC', 1),
    createFixed('IMSECH', 1),
    createFixed('IMSIN', 1),
    createFixed('IMSINH', 1),
    createFixed('IMSQRT', 1),
    createFixed('IMSUB', 2),
    createFnDef('IMSUM', 1, null),
    createFixed('IMTAN', 1),
    createFnDef('INDEX', 1, 3),
    createFixed('INFO', 1),
    createFixed('INT', 1),
    createFixed('INTERCEPT', 2),
    createFnDef('INTRATE', 4, 5),
    createFnDef('IPMT', 4, 6),
    createFnDef('IRR', 1, 2),
    createFixed('ISBLANK', 1),
    createFixed('ISERR', 1),
    createFixed('ISERROR', 1),
    createFixed('ISEVEN', 1),
    createFixed('ISFORMULA', 1),
    createFixed('ISLOGICAL', 1),
    createFixed('ISNA', 1),
    createFixed('ISNONTEXT', 1),
    createFixed('ISNUMBER', 1),
    createFnDef('ISO.CEILING', 1, 2),
    createFixed('ISODD', 1),
    createFixed('ISOWEEKNUM', 1),
    createFixed('ISPMT', 4),
    createFixed('ISREF', 1),
    createFixed('ISTEXT', 1),
    createFixed('JIS', 1),
    createFnDef('KURT', 1, null),
    createFixed('LARGE', 2),
    createFnDef('LCM', 1, null),
    createFnDef('LEFT', 1, 2),
    createFnDef('LEFTB', 1, 2),
    createFixed('LEN', 1),
    createFixed('LENB', 1),
    createFnDef('LINEST', 1, 4),
    createFixed('LN', 1),
    createFnDef('LOG', 1, 2),
    createFixed('LOG10', 1),
    createFnDef('LOGEST', 1, 4),
    createFixed('LOGINV', 3),
    createFixed('LOGNORM.DIST', 4),
    createFixed('LOGNORM.INV', 3),
    createFixed('LOGNORMDIST', 3),
    createFnDef('LOOKUP', 2, 3),
    createFixed('LOWER', 1),
    createFnDef('MATCH', 2, 3),
    createFnDef('MAX', 1, null),
    createFnDef('MAXA', 1, null),
    createFnDef('MAXIFS', 3, null),
    createFixed('MDETERM', 1),
    createFnDef('MDURATION', 5, 6),
    createFnDef('MEDIAN', 1, 9),
    createFixed('MID', 3),
    createFixed('MIDB', 3),
    createFnDef('MIN', 1, null),
    createFnDef('MINA', 1, null),
    createFnDef('MINIFS', 3, null),
    createFixed('MINUTE', 1),
    createFixed('MINVERSE', 1),
    createFixed('MIRR', 3),
    createFixed('MMULT', 2),
    createFixed('MOD', 2),
    createFnDef('MODE', 1, null),
    createFnDef('MODE.MULT', 1, null),
    createFnDef('MODE.SNGL', 1, null),
    createFixed('MONTH', 1),
    createFixed('MROUND', 2),
    createFnDef('MULTINOMIAL', 1, null),
    createFixed('MUNIT', 1),
    createFixed('N', 1),
    createFixed('NA', 0),
    createFixed('NEGBINOM.DIST', 4),
    createFixed('NEGBINOMDIST', 3),
    createFnDef('NETWORKDAYS', 2, 3),
    createFnDef('NETWORKDAYS.INTL', 2, 4),
    createFixed('NOMINAL', 2),
    createFixed('NORM.DIST', 4),
    createFixed('NORM.INV', 3),
    createFixed('NORM.S.DIST', 2),
    createFixed('NORM.S.INV', 1),
    createFixed('NORMDIST', 4),
    createFixed('NORMINV', 3),
    createFixed('NORMSDIST', 1),
    createFixed('NORMSINV', 1),
    createFixed('NOT', 1),
    createFixed('NOW', 0),
    createFnDef('NPER', 3, 5),
    createFnDef('NPV', 2, 9),
    createFnDef('NUMBERVALUE', 1, 3),
    createFnDef('OCT2BIN', 1, 2),
    createFnDef('OCT2DEC', 1, 2),
    createFnDef('OCT2HEX', 1, 2),
    createFixed('ODD', 1),
    createFnDef('ODDFPRICE', 2, 9),
    createFnDef('ODDFYIELD', 8, 9),
    createFnDef('ODDLPRICE', 7, 8),
    createFnDef('ODDLYIELD', 7, 8),
    createFnDef('OFFSET', 3, 5),
    createFnDef('OR', 1, 9),
    createFixed('PDURATION', 3),
    createFixed('PEARSON', 2),
    createFixed('PERCENTILE', 2),
    createFixed('PERCENTILE.EXC', 2),
    createFixed('PERCENTILE.INC', 2),
    createFnDef('PERCENTRANK', 2, 3),
    createFnDef('PERCENTRANK.EXC', 2, 3),
    createFnDef('PERCENTRANK.INC', 2, 3),
    createFixed('PERMUT', 2),
    createFixed('PERMUTATIONA', 2),
    createFixed('PHI', 1),
    createFixed('PHONETIC', 1),
    createFixed('PI', 0),
    createFnDef('PMT', 3, 5),
    createFixed('POISSON', 3),
    createFixed('POISSON.DIST', 3),
    createFixed('POWER', 2),
    createFnDef('PPMT', 4, 6),
    createFnDef('PRICE', 6, 7),
    createFnDef('PRICEDISC', 4, 5),
    createFnDef('PRICEMAT', 4, 5),
    createFnDef('PROB', 2, 4),
    createFnDef('PRODUCT', 1, 9),
    createFixed('PROPER', 1),
    createFnDef('PV', 3, 5),
    createFixed('QUARTILE', 2),
    createFixed('QUARTILE.EXC', 2),
    createFixed('QUARTILE.INC', 2),
    createFixed('QUOTIENT', 2),
    createFixed('RADIANS', 1),
    createFixed('RAND', 0),
    createFixed('RANDBETWEEN', 2),
    createFnDef('RANK', 2, 3),
    createFnDef('RANK.AVG', 2, 3),
    createFnDef('RANK.EQ', 2, 3),
    createFnDef('RATE', 3, 6),
    createFnDef('RECEIVED', 4, 5),
    createFnDef('REGISTER.ID', 2, 3),
    createFixed('REPLACE', 4),
    createFixed('REPLACEB', 4),
    createFixed('REPT', 2),
    createFnDef('RIGHT', 1, 2),
    createFnDef('RIGHTB', 1, 2),
    createFnDef('ROMAN', 1, 2),
    createFixed('ROUND', 2),
    createFixed('ROUNDDOWN', 2),
    createFixed('ROUNDUP', 2),
    createFnDef('ROW', 0, 1),
    createFixed('ROWS', 1),
    createFixed('RRI', 3),
    createFixed('RSQ', 2),
    createFnDef('RTD', 3, 9),
    createFnDef('SEARCH', 2, 3),
    createFnDef('SEARCHB', 2, 3),
    createFixed('SEC', 1),
    createFixed('SECH', 1),
    createFixed('SECOND', 1),
    createFixed('SERIESSUM', 4),
    createFnDef('SHEET', 0, 1),
    createFnDef('SHEETS', 0, 1),
    createFixed('SIGN', 1),
    createFixed('SIN', 1),
    createFixed('SINH', 1),
    createFnDef('SKEW', 1, 6),
    createFnDef('SKEW.P', 1, 6),
    createFixed('SLN', 3),
    createFixed('SLOPE', 2),
    createFixed('SMALL', 2),
    createFnDef('SQL.REQUEST', 1, 5),
    createFixed('SQRT', 1),
    createFixed('SQRTPI', 1),
    createFixed('STANDARDIZE', 3),
    createFnDef('STDEV', 1, 9),
    createFnDef('STDEV.P', 1, 9),
    createFnDef('STDEV.S', 1, 9),
    createFnDef('STDEVA', 1, 9),
    createFnDef('STDEVP', 1, 9),
    createFnDef('STDEVPA', 1, 9),
    createFixed('STEYX', 2),
    createFnDef('SUBSTITUTE', 3, 4),
    createFnDef('SUBTOTAL', 2, 9),
    createFnDef('SUM', 1, null),
    createFnDef('SUMIF', 2, 3),
    createFnDef('SUMIFS', 3, 7),
    createFnDef('SUMPRODUCT', 1, 9),
    createFnDef('SUMSQ', 1, 9),
    createFixed('SUMX2MY2', 2),
    createFixed('SUMX2PY2', 2),
    createFixed('SUMXMY2', 2),
    createFnDef('SWITCH', 3, 9),
    createFixed('SYD', 4),
    createFixed('T', 1),
    createFixed('T.DIST', 3),
    createFixed('T.DIST.2T', 3),
    createFixed('T.DIST.RT', 2),
    createFixed('T.INV', 2),
    createFixed('T.INV.2T', 2),
    createFixed('T.TEST', 4),
    createFixed('TAN', 1),
    createFixed('TANH', 1),
    createFixed('TBILLEQ', 3),
    createFixed('TBILLPRICE', 3),
    createFixed('TBILLYIELD', 2),
    createFixed('TDIST', 3),
    createFixed('TEXT', 2),
    createFnDef('TEXTJOIN', 3, 8),
    createFixed('TIME', 3),
    createFixed('TIMEVALUE', 1),
    createFixed('TINV', 2),
    createFixed('TODAY', 0),
    createFixed('TRANSPOSE', 1),
    createFnDef('TREND', 1, 4),
    createFixed('TRIM', 1),
    createFixed('TRIMMEAN', 2),
    createFnDef('TRUNC', 1, 2),
    createFixed('TTEST', 4),
    createFixed('TYPE', 1),
    createFixed('UNICHAR', 1),
    createFixed('UNICODE', 1),
    createFixed('UPPER', 1),
    createFixed('VALUE', 1),
    createFnDef('VAR', 1, 9),
    createFnDef('VAR.P', 1, 9),
    createFnDef('VAR.S', 1, 9),
    createFnDef('VARA', 1, 9),
    createFnDef('VARP', 1, 9),
    createFnDef('VARPA', 1, 9),
    createFnDef('VDB', 5, 7),
    createFnDef('VLOOKUP', 3, 4),
    createFixed('WEBSERVICE', 1),
    createFnDef('WEEKDAY', 1, 2),
    createFnDef('WEEKNUM', 1, 2),
    createFixed('WEIBULL', 4),
    createFixed('WEIBULL.DIST', 4),
    createFnDef('WORKDAY', 2, 3),
    createFnDef('WORKDAY.INTL', 2, 4),
    createFnDef('XIRR', 2, 3),
    createFixed('XNPV', 3),
    createFnDef('XOR', 1, 9),
    createFixed('YEAR', 1),
    createFnDef('YEARFRAC', 2, 3),
    createFnDef('YIELD', 6, 7),
    createFnDef('YIELDDISC', 4, 5),
    createFnDef('YIELDMAT', 5, 6),
    createFnDef('Z.TEST', 2, 3),
    createFnDef('ZTEST', 2, 3)
  ];

  const normalizeFnName = (name: string): string => name.toLocaleUpperCase();

  const functionMap: ReadonlyMap<string, FunctionDefinition> = defaultFunctionDefinitions.reduce(
    (map, def) => map.set(normalizeFnName(def.name), def),
    new Map<string, FunctionDefinition>()
  );

  export const getFunctionDefinition = (name: string): FunctionDefinition | null =>
    functionMap.get(normalizeFnName(name)) || null;

  const functionNames = P.strSat(defaultFunctionDefinitions.map(s => s.name));

  export const reservedWord: P.IParser<undefined> = P.fail(
    // the poison pill generic type parameter
    // is purely so that this parser returns
    // a type that is a "reference".
    P.pipe<CU.CharStream, AST.PoisonPill>(P.choices(functionNames))(() => new AST.PoisonPill())
  )('Cannot parse a reserved word.') as P.IParser<undefined>;
}
